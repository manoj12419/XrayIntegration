"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.multiplePreconditionKeysInCucumberBackgroundError = exports.missingPreconditionKeyInCucumberBackgroundError = exports.multipleTestKeysInCucumberScenarioError = exports.missingTestKeyInCucumberScenarioError = exports.multipleTestKeysInNativeTestTitleError = exports.missingTestKeyInNativeTestTitleError = exports.isLoggedError = exports.LoggedError = exports.errorMessage = void 0;
const dedent_1 = require("./dedent");
const help_1 = require("./help");
/**
 * Returns an error message of any error.
 *
 * @param error - the error
 * @returns the error message
 */
function errorMessage(error) {
    if (error instanceof Error) {
        return error.message;
    }
    return `${error}`;
}
exports.errorMessage = errorMessage;
/**
 * An error which has been logged to a file or other log locations already.
 */
class LoggedError extends Error {
}
exports.LoggedError = LoggedError;
/**
 * Assesses whether the given error is an instance of a {@link LoggedError | `LoggedError`}.
 *
 * @param error - the error
 * @returns `true` if the error is a {@link LoggedError | `LoggedError`}, otherwise `false`
 */
function isLoggedError(error) {
    return error instanceof LoggedError;
}
exports.isLoggedError = isLoggedError;
// ============================================================================================== //
// COLLECTION OF USEFUL ERRORS                                                                    //
// ============================================================================================== //
/**
 * Returns an error describing that a test issue key is missing in the title of a native Cypress
 * test case.
 *
 * @param title - the Cypress test title
 * @param projectKey - the project key
 * @returns the error
 */
function missingTestKeyInNativeTestTitleError(title, projectKey) {
    return new Error((0, dedent_1.dedent)(`
            No test issue keys found in title of test: ${title}
            You can target existing test issues by adding a corresponding issue key:

            it("${projectKey}-123 ${title}", () => {
              // ...
            });

            For more information, visit:
            - ${help_1.HELP.plugin.guides.targetingExistingIssues}
        `));
}
exports.missingTestKeyInNativeTestTitleError = missingTestKeyInNativeTestTitleError;
/**
 * Returns an error describing that multiple test issue keys are present in the title of a native
 * Cypress test case.
 *
 * @param title - the Cypress test title
 * @param issueKeys - the issue keys
 * @returns the error
 */
function multipleTestKeysInNativeTestTitleError(title, issueKeys) {
    // Remove any circumflexes currently present in the title.
    let indicatorLine = title.replaceAll("^", " ");
    issueKeys.forEach((issueKey) => {
        indicatorLine = indicatorLine.replaceAll(issueKey, "^".repeat(issueKey.length));
    });
    // Replace everything but circumflexes with space.
    indicatorLine = indicatorLine.replaceAll(/[^^]/g, " ");
    return new Error((0, dedent_1.dedent)(`
            Multiple test keys found in title of test: ${title}
            The plugin cannot decide for you which one to use:

            it("${title}", () => {
                ${indicatorLine}
              // ...
            });

            For more information, visit:
            - ${help_1.HELP.plugin.guides.targetingExistingIssues}
        `));
}
exports.multipleTestKeysInNativeTestTitleError = multipleTestKeysInNativeTestTitleError;
/**
 * Returns an error describing that a test issue key is missing in the tags of a Cucumber scenario.
 *
 * @param scenario - the Cucumber scenario
 * @param projectKey - the project key
 * @param expectedCloudTags - whether Xray cloud tags were expected
 * @returns the error
 */
function missingTestKeyInCucumberScenarioError(scenario, projectKey, expectedCloudTags) {
    return new Error((0, dedent_1.dedent)(`
            No test issue keys found in tags of scenario: ${scenario.name}
            You can target existing test issues by adding a corresponding tag:

            ${expectedCloudTags ? `@TestName:${projectKey}-123` : `@${projectKey}-123`}
            ${scenario.keyword}: ${scenario.name}
              # steps ...

            For more information, visit:
            - ${expectedCloudTags
        ? help_1.HELP.xray.importCucumberTests.cloud
        : help_1.HELP.xray.importCucumberTests.server}
            - ${help_1.HELP.plugin.guides.targetingExistingIssues}
        `));
}
exports.missingTestKeyInCucumberScenarioError = missingTestKeyInCucumberScenarioError;
/**
 * Returns an error describing that multiple test issue keys are present in the tags of a Cucumber
 * scenario.
 *
 * @param scenario - the Cucumber scenario
 * @param tags - the scenario tags
 * @param issueKeys - the issue keys
 * @param expectedCloudTags - whether Xray cloud tags were expected
 * @returns the error
 */
function multipleTestKeysInCucumberScenarioError(scenario, tags, issueKeys, expectedCloudTags) {
    return new Error((0, dedent_1.dedent)(`
            Multiple test issue keys found in tags of scenario: ${scenario.name}
            The plugin cannot decide for you which one to use:

            ${tags.map((tag) => tag.name).join(" ")}
            ${tags
        .map((tag) => {
        if (issueKeys.some((key) => tag.name.endsWith(key))) {
            return "^".repeat(tag.name.length);
        }
        return " ".repeat(tag.name.length);
    })
        .join(" ")
        .trimEnd()}
            ${scenario.keyword}: ${scenario.name}
              # steps ...

            For more information, visit:
            - ${expectedCloudTags
        ? help_1.HELP.xray.importCucumberTests.cloud
        : help_1.HELP.xray.importCucumberTests.server}
            - ${help_1.HELP.plugin.guides.targetingExistingIssues}
        `));
}
exports.multipleTestKeysInCucumberScenarioError = multipleTestKeysInCucumberScenarioError;
/**
 * Returns an error describing that a test issue key is missing in the comments of a Cucumber
 * background.
 *
 * @param background - the Cucumber background
 * @param projectKey - the project key
 * @param expectedCloudTags - whether Xray cloud tags were expected
 * @returns the error
 */
function missingPreconditionKeyInCucumberBackgroundError(background, projectKey, expectedCloudTags) {
    return new Error((0, dedent_1.dedent)(`
            No precondition issue keys found in comments of background: ${background.name}
            You can target existing precondition issues by adding a corresponding comment:

            ${background.keyword}: ${background.name}
              ${expectedCloudTags ? `#@Precondition:${projectKey}-123` : `#@${projectKey}-123`}
              # steps ...

            For more information, visit:
            - ${expectedCloudTags
        ? help_1.HELP.xray.importCucumberTests.cloud
        : help_1.HELP.xray.importCucumberTests.server}
            - ${help_1.HELP.plugin.guides.targetingExistingIssues}
        `));
}
exports.missingPreconditionKeyInCucumberBackgroundError = missingPreconditionKeyInCucumberBackgroundError;
/**
 * Returns an error describing that multiple test issue keys are present in the comments of a
 * Cucumber background.
 *
 * @param background - the Cucumber background
 * @param preconditionKeys - the issue keys
 * @param comments - the precondition comments
 * @param expectedCloudTags - whether Xray cloud tags were expected
 * @returns the error
 */
function multiplePreconditionKeysInCucumberBackgroundError(background, preconditionKeys, comments, expectedCloudTags) {
    return new Error((0, dedent_1.dedent)(`
            Multiple precondition issue keys found in comments of background: ${background.name}
            The plugin cannot decide for you which one to use:

            ${reconstructMultipleTagsBackground(background, preconditionKeys, comments)}

            For more information, visit:
            - ${expectedCloudTags
        ? help_1.HELP.xray.importCucumberTests.cloud
        : help_1.HELP.xray.importCucumberTests.server}
            - ${help_1.HELP.plugin.guides.targetingExistingIssues}
        `));
}
exports.multiplePreconditionKeysInCucumberBackgroundError = multiplePreconditionKeysInCucumberBackgroundError;
function reconstructMultipleTagsBackground(background, preconditionIssueKeys, comments) {
    const example = [];
    const backgroundLine = background.location.line;
    const firstStepLine = background.steps[0].location.line;
    example.push(`${background.keyword}: ${background.name}`);
    for (const comment of comments) {
        if (comment.location.line > backgroundLine && comment.location.line < firstStepLine) {
            example.push(`  ${comment.text.trimStart()}`);
            if (preconditionIssueKeys.some((key) => comment.text.endsWith(key))) {
                example.push(`  ${comment.text.replaceAll(/\S/g, "^").trimStart()}`);
            }
        }
    }
    example.push("  # steps ...");
    return example.join("\n");
}
