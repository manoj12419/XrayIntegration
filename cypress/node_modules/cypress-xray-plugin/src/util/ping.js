"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pingXrayCloud = exports.pingXrayServer = exports.pingJiraInstance = void 0;
const requests_1 = require("../https/requests");
const logging_1 = require("../logging/logging");
const dedent_1 = require("./dedent");
const errors_1 = require("./errors");
const help_1 = require("./help");
const time_1 = require("./time");
/**
 * Pings a Jira instance and verifies that:
 * - the URL is the base URL of a Jira instance
 * - the credentials belong to a valid Jira user
 *
 * @param url - the base URL of the Jira instance
 * @param credentials - the credentials of a valid Jira user
 * @see https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-myself/#api-rest-api-3-myself-get
 * @see https://docs.atlassian.com/software/jira/docs/api/REST/9.11.0/#api/2/myself
 */
async function pingJiraInstance(url, credentials) {
    (0, logging_1.logDebug)("Pinging Jira instance...");
    const progressInterval = (0, time_1.startInterval)((totalTime) => {
        (0, logging_1.logInfo)(`Waiting for ${url} to respond... (${totalTime / 1000} seconds)`);
    });
    try {
        const header = await credentials.getAuthorizationHeader();
        const userResponse = await requests_1.Requests.get(`${url}/rest/api/latest/myself`, {
            headers: {
                ...header,
            },
        });
        const username = getUserString(userResponse.data);
        if (username) {
            (0, logging_1.logDebug)((0, dedent_1.dedent)(`
                    Successfully established communication with: ${url}
                    The provided Jira credentials belong to: ${username}
                `));
        }
        else {
            throw new Error((0, dedent_1.dedent)(`
                    Jira did not return a valid response: JSON containing a username was expected, but not received
                `));
        }
    }
    catch (error) {
        throw new Error((0, dedent_1.dedent)(`
                Failed to establish communication with Jira: ${url}

                ${(0, errors_1.errorMessage)(error)}

                Make sure you have correctly set up:
                - Jira base URL: ${help_1.HELP.plugin.configuration.jira.url}
                - Jira authentication: ${help_1.HELP.plugin.configuration.authentication.jira.root}

                For more information, set the plugin to debug mode: ${help_1.HELP.plugin.configuration.plugin.debug}
            `));
    }
    finally {
        clearInterval(progressInterval);
    }
}
exports.pingJiraInstance = pingJiraInstance;
function getUserString(user) {
    return user.displayName ?? user.emailAddress ?? user.name;
}
/**
 * Pings an Xray server instance and verifies that:
 * - the URL is the base URL of an Xray server instance
 * - the credentials belong to a user with a valid Xray license
 *
 * @param url - the base URL of the Xray server instance
 * @param credentials - the credentials of a user with a valid Xray license
 * @see https://docs.getxray.app/display/XRAY/v2.0#/External%20Apps/get_xraylicense
 */
async function pingXrayServer(url, credentials) {
    (0, logging_1.logDebug)("Pinging Xray server instance...");
    const progressInterval = (0, time_1.startInterval)((totalTime) => {
        (0, logging_1.logInfo)(`Waiting for ${url} to respond... (${totalTime / 1000} seconds)`);
    });
    try {
        const header = await credentials.getAuthorizationHeader();
        const licenseResponse = await requests_1.Requests.get(`${url}/rest/raven/latest/api/xraylicense`, {
            headers: {
                ...header,
            },
        });
        if (typeof licenseResponse.data === "object" && "active" in licenseResponse.data) {
            if (licenseResponse.data.active) {
                (0, logging_1.logDebug)((0, dedent_1.dedent)(`
                        Successfully established communication with: ${url}
                        Xray license is active: ${licenseResponse.data.licenseType}
                    `));
            }
            else {
                throw new Error("The Xray license is not active");
            }
        }
        else {
            throw new Error((0, dedent_1.dedent)(`
                    Xray did not return a valid response: JSON containing basic Xray license information was expected, but not received
                `));
        }
    }
    catch (error) {
        throw new Error((0, dedent_1.dedent)(`
                Failed to establish communication with Xray: ${url}

                ${(0, errors_1.errorMessage)(error)}

                Make sure you have correctly set up:
                - Jira base URL: ${help_1.HELP.plugin.configuration.jira.url}
                - Xray server authentication: ${help_1.HELP.plugin.configuration.authentication.xray.server}
                - Xray itself: ${help_1.HELP.xray.installation.server}

                For more information, set the plugin to debug mode: ${help_1.HELP.plugin.configuration.plugin.debug}

            `));
    }
    finally {
        clearInterval(progressInterval);
    }
}
exports.pingXrayServer = pingXrayServer;
/**
 * Pings Xray cloud and verifies that the credentials belong to a user with a valid Xray license.
 *
 * @param credentials - Xray cloud credentials
 * @see https://docs.getxray.app/display/XRAYCLOUD/Authentication+-+REST+v2
 */
async function pingXrayCloud(credentials) {
    (0, logging_1.logDebug)("Pinging Xray cloud...");
    try {
        await credentials.getAuthorizationHeader();
        (0, logging_1.logDebug)((0, dedent_1.dedent)(`
                Successfully established communication with: ${credentials.getAuthenticationUrl()}
                The provided credentials belong to a user with a valid Xray license
            `));
    }
    catch (error) {
        throw new Error((0, dedent_1.dedent)(`
                Failed to establish communication with Xray: ${credentials.getAuthenticationUrl()}

                ${(0, errors_1.errorMessage)(error)}

                Make sure you have correctly set up:
                - Xray cloud authentication: ${help_1.HELP.plugin.configuration.authentication.xray.cloud}
                - Xray itself: ${help_1.HELP.xray.installation.cloud}

                For more information, set the plugin to debug mode: ${help_1.HELP.plugin.configuration.plugin.debug}
            `));
    }
}
exports.pingXrayCloud = pingXrayCloud;
