import { StringMap } from "../../types/util";
import { IJiraFieldRepository } from "./fields/jiraFieldRepository";
import { IJiraIssueFetcher, SupportedFields } from "./fields/jiraIssueFetcher";
/**
 * An interface describing a Jira repository, which provides methods for retrieving issue data such
 * as summaries, descriptions, labels or test types.
 */
export interface IJiraRepository {
    /**
     * Retrieve the internal Jira ID of a field.
     *
     * @param fieldName - the field
     * @returns the field ID
     * @see https://confluence.atlassian.com/jirakb/how-to-find-id-for-custom-field-s-744522503.html
     */
    getFieldId(fieldName: SupportedFields): Promise<string>;
    /**
     * Retrieve the descriptions of all provided issues, represented through their Jira issue keys.
     *
     * @param issueKeys - the issue keys
     * @returns a mapping of issue keys to issue descriptions
     */
    getDescriptions(...issueKeys: string[]): Promise<StringMap<string>>;
    /**
     * Retrieve the labels of all provided issues, represented through their Jira issue keys.
     *
     * @param issueKeys - the issue keys
     * @returns a mapping of issue keys to issue labels
     */
    getLabels(...issueKeys: string[]): Promise<StringMap<string[]>>;
    /**
     * Retrieve the summaries of all provided issues, represented through their Jira issue keys.
     *
     * @param issueKeys - the issue keys
     * @returns a mapping of issue keys to issue summaries
     */
    getSummaries(...issueKeys: string[]): Promise<StringMap<string>>;
    /**
     * Retrieve the test types of all provided test issues, represented through their Jira issue
     * keys.
     *
     * @param issueKeys - the issue keys
     * @returns a mapping of issue keys to test issue types
     * @see https://docs.getxray.app/display/ON/Enabling+Xray+Issue+Types
     */
    getTestTypes(...issueKeys: string[]): Promise<StringMap<string>>;
}
/**
 * A Jira repository which caches retrieved data. Caching means that live issue information is only
 * retrieved for the first request. All subsequent accesses will then return the cached value.
 */
export declare class CachingJiraRepository implements IJiraRepository {
    protected readonly jiraFieldRepository: IJiraFieldRepository;
    protected readonly jiraIssueFetcher: IJiraIssueFetcher;
    private readonly summaries;
    private readonly descriptions;
    private readonly testTypes;
    private readonly labels;
    /**
     * Construct a new caching Jira repository. It relies on an internal field repository and an
     * issue data fetcher for information retrieval.
     *
     * @param jiraFieldRepository - the Jira field repository
     * @param jiraIssueFetcher - the Jira issue fetcher
     */
    constructor(jiraFieldRepository: IJiraFieldRepository, jiraIssueFetcher: IJiraIssueFetcher);
    getFieldId(fieldName: SupportedFields): Promise<string>;
    getSummaries(...issueKeys: string[]): Promise<StringMap<string>>;
    getDescriptions(...issueKeys: string[]): Promise<StringMap<string>>;
    getTestTypes(...issueKeys: string[]): Promise<StringMap<string>>;
    getLabels(...issueKeys: string[]): Promise<StringMap<string[]>>;
    private mergeRemainingFields;
}
