import { IJiraClient } from "../../../client/jira/jiraClient";
import { SupportedFields } from "./jiraIssueFetcher";
/**
 * An interface describing a Jira field repository, which provides methods for retrieving arbitrary
 * field IDs from Jira.
 */
export interface IJiraFieldRepository {
    /**
     * Returns the Jira field ID for the field with the provided name.
     *
     * @param fieldName - the field name
     * @returns the field's Jira ID
     * @throws if the field does not exist or if there are multiple fields with the given name
     */
    getFieldId(fieldName: SupportedFields): Promise<string>;
}
/**
 * A Jira field repository which caches retrieved field IDs. After the first ID retrieval, all
 * subsequent accesses will return the cached value.
 */
export declare class CachingJiraFieldRepository implements IJiraFieldRepository {
    private readonly jiraClient;
    private readonly names;
    private readonly ids;
    /**
     * Constructs a new caching Jira field repository. The Jira client is necessary for accessing
     * Jira data.
     *
     * @param jiraClient - the Jira client
     */
    constructor(jiraClient: IJiraClient);
    getFieldId(fieldName: SupportedFields): Promise<string>;
    private multipleFieldsError;
    private missingFieldsError;
    private getOptionName;
}
