import { IHttpCredentials } from "../../authentication/credentials";
import { ISearchRequest } from "../../types/jira/requests/search";
import { IAttachment } from "../../types/jira/responses/attachment";
import { IFieldDetail } from "../../types/jira/responses/fieldDetail";
import { IIssue } from "../../types/jira/responses/issue";
import { IIssueTypeDetails } from "../../types/jira/responses/issueTypeDetails";
import { IIssueUpdate } from "../../types/jira/responses/issueUpdate";
import { Client } from "../client";
/**
 * All methods a Jira client needs to implement.
 */
export interface IJiraClient {
    /**
     * Adds one or more attachments to an issue. Attachments are posted as multipart/form-data.
     *
     * @param issueIdOrKey - issueIdOrKey the ID or key of the issue that attachments are added to
     * @param files - files the files to attach
     * @returns a list of issue attachment responses or `undefined` in case of errors
     * @see https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-attachments/#api-rest-api-3-issue-issueidorkey-attachments-post
     * @see https://docs.atlassian.com/software/jira/docs/api/REST/9.7.0/#api/2/issue/\{issueIdOrKey\}/attachments-addAttachment
     */
    addAttachment(issueIdOrKey: string, ...files: string[]): Promise<IAttachment[] | undefined>;
    /**
     * Returns all issue types.
     *
     * @returns the issue types or `undefined` in case of errors
     * @see https://docs.atlassian.com/software/jira/docs/api/REST/9.9.1/#api/2/issuetype-getIssueAllTypes
     * @see https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-types/#api-rest-api-3-issuetype-get
     */
    getIssueTypes(): Promise<IIssueTypeDetails[] | undefined>;
    /**
     * Returns system and custom issue fields according to the following rules:
     * - Fields that cannot be added to the issue navigator are always returned
     * - Fields that cannot be placed on an issue screen are always returned
     * - Fields that depend on global Jira settings are only returned if the setting is enabled
     *   That is, timetracking fields, subtasks, votes, and watches
     * - For all other fields, this operation only returns the fields that the user has permission
     *   to view (that is, the field is used in at least one project that the user has *Browse
     *   Projects* project permission for)
     *
     * @returns the fields or `undefined` in case of errors
     * @see https://docs.atlassian.com/software/jira/docs/api/REST/9.9.1/#api/2/field-getFields
     * @see https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-fields/#api-rest-api-3-field-get
     */
    getFields(): Promise<IFieldDetail[] | undefined>;
    /**
     * Searches for issues using JQL. Automatically performs pagination if necessary.
     *
     * @param request - the search request
     * @returns the search results or `undefined` in case of errors
     * @see https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-search/#api-rest-api-3-search-post
     * @see https://docs.atlassian.com/software/jira/docs/api/REST/9.9.1/#api/2/search-searchUsingSearchRequest
     */
    search(request: ISearchRequest): Promise<IIssue[] | undefined>;
    /**
     * Edits an issue. A transition may be applied and issue properties updated as part of the edit.
     * The edits to the issue's fields are defined using `update` and `fields`.
     *
     * The parent field may be set by key or ID. For standard issue types, the parent may be removed
     * by setting `update.parent.set.none` to `true`.
     *
     * @param issueIdOrKey - the ID or key of the issue
     * @param issueUpdateData - the edit data
     * @returns the ID or key of the edited issue or `undefined` in case of errors
     * @see https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-issueidorkey-put
     * @see https://docs.atlassian.com/software/jira/docs/api/REST/9.10.0/#api/2/issue-editIssue
     */
    editIssue(issueIdOrKey: string, issueUpdateData: IIssueUpdate): Promise<string | undefined>;
}
/**
 * A Jira client class for communicating with Jira instances.
 */
export declare abstract class JiraClient extends Client implements IJiraClient {
    /**
     * Construct a new Jira client using the provided credentials.
     *
     * @param apiBaseUrl - the Jira base endpoint
     * @param credentials - the credentials to use during authentication
     */
    constructor(apiBaseUrl: string, credentials: IHttpCredentials);
    addAttachment(issueIdOrKey: string, ...files: string[]): Promise<IAttachment[] | undefined>;
    /**
     * Returns the endpoint to use for adding attchments to issues.
     *
     * @param issueIdOrKey - the ID or key of the issue that attachments are added to
     * @returns the URL
     */
    abstract getUrlAddAttachment(issueIdOrKey: string): string;
    getIssueTypes(): Promise<IIssueTypeDetails[] | undefined>;
    /**
     * Returns the endpoint to use for retrieving issue types.
     *
     * @returns the URL
     */
    abstract getUrlGetIssueTypes(): string;
    getFields(): Promise<IFieldDetail[] | undefined>;
    /**
     * Returns the endpoint to use for retrieving fields.
     *
     * @returns the URL
     */
    abstract getUrlGetFields(): string;
    search(request: ISearchRequest): Promise<IIssue[] | undefined>;
    /**
     * Returns the endpoint to use for searching issues.
     *
     * @returns the endpoint
     */
    abstract getUrlPostSearch(): string;
    editIssue(issueIdOrKey: string, issueUpdateData: IIssueUpdate): Promise<string | undefined>;
    /**
     * Returns the endpoint to use for editing issues.
     *
     * @param issueIdOrKey - the ID or key of the issue
     * @returns the endpoint
     */
    abstract getUrlEditIssue(issueIdOrKey: string): string;
}
