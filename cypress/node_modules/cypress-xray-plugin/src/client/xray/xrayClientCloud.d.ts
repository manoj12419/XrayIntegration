import FormData from "form-data";
import { JWTCredentials } from "../../authentication/credentials";
import { RequestConfigPost } from "../../https/requests";
import { StringMap } from "../../types/util";
import { CucumberMultipartFeature } from "../../types/xray/requests/importExecutionCucumberMultipart";
import { ICucumberMultipartInfo } from "../../types/xray/requests/importExecutionCucumberMultipartInfo";
import { ImportExecutionResponseCloud } from "../../types/xray/responses/importExecution";
import { ImportFeatureResponseCloud } from "../../types/xray/responses/importFeature";
import { IXrayClient, XrayClient } from "./xrayClient";
export interface IXrayClientCloud extends IXrayClient {
    /**
     * Returns Xray test types for the provided test issues, such as `Manual`, `Cucumber` or
     * `Generic`.
     *
     * @param projectKey - key of the project containing the test issues
     * @param issueKeys - the keys of the test issues to retrieve test types for
     * @returns a promise which will contain the mapping of issues to test types
     */
    getTestTypes(projectKey: string, ...issueKeys: string[]): Promise<StringMap<string>>;
}
export declare class XrayClientCloud extends XrayClient implements IXrayClientCloud {
    /**
     * The URLs of Xray's Cloud API.
     * Note: API v1 would also work, but let's stick to the more recent one.
     */
    static readonly URL = "https://xray.cloud.getxray.app/api/v2";
    private static readonly URL_GRAPHQL;
    private static readonly GRAPHQL_LIMITS;
    /**
     * Construct a new Xray cloud client using the provided credentials.
     *
     * @param credentials - the credentials to use during authentication
     */
    constructor(credentials: JWTCredentials);
    getUrlImportExecution(): string;
    handleResponseImportExecution(response: ImportExecutionResponseCloud): string;
    getUrlExportCucumber(issueKeys?: string[], filter?: number): string;
    getUrlImportFeature(projectKey?: string, projectId?: string): string;
    handleResponseImportFeature(response: ImportFeatureResponseCloud): void;
    getTestTypes(projectKey: string, ...issueKeys: string[]): Promise<StringMap<string>>;
    prepareRequestImportExecutionCucumberMultipart(cucumberJson: CucumberMultipartFeature[], cucumberInfo: ICucumberMultipartInfo): Promise<RequestConfigPost<FormData>>;
    handleResponseImportExecutionCucumberMultipart(response: ImportExecutionResponseCloud): string;
}
