import FormData from "form-data";
import { BasicAuthCredentials, JWTCredentials, PATCredentials } from "../../authentication/credentials";
import { RequestConfigPost } from "../../https/requests";
import { IXrayTestExecutionResults } from "../../types/xray/importTestExecutionResults";
import { CucumberMultipartFeature } from "../../types/xray/requests/importExecutionCucumberMultipart";
import { ICucumberMultipartInfo } from "../../types/xray/requests/importExecutionCucumberMultipartInfo";
import { ExportCucumberTestsResponse } from "../../types/xray/responses/exportFeature";
import { ImportExecutionResponseCloud, ImportExecutionResponseServer } from "../../types/xray/responses/importExecution";
import { ImportFeatureResponseCloud, ImportFeatureResponseServer } from "../../types/xray/responses/importFeature";
import { Client } from "../client";
export interface IXrayClient {
    /**
     * Uploads test results to the Xray instance.
     *
     * @param results - the test results as provided by Cypress
     * @returns the key of the test execution issue, `null` if the upload was skipped or `undefined`
     * in case of errors
     * @see https://docs.getxray.app/display/XRAYCLOUD/Import+Execution+Results+-+REST+v2
     */
    importExecution(execution: IXrayTestExecutionResults): Promise<string | null | undefined>;
    /**
     * Downloads feature (file) specifications from corresponding Xray issues.
     *
     * @param keys - a list of issue keys
     * @param filter - an integer that represents the filter ID
     * @returns the response of the Xray instance
     * @see https://docs.getxray.app/display/XRAYCLOUD/Exporting+Cucumber+Tests+-+REST+v2
     */
    exportCucumber(keys?: string[], filter?: number): Promise<ExportCucumberTestsResponse>;
    /**
     * Uploads (zipped) feature file(s) to corresponding Xray issues.
     *
     * @param file - the (zipped) Cucumber feature file(s)
     * @param projectKey - key of the project where the tests and pre-conditions are going to be created
     * @param projectId - id of the project where the tests and pre-conditions are going to be created
     * @param source - a name designating the source of the features being imported (e.g. the source project name)
     * @returns `true` if the import was successful, `false` otherwise
     * @see https://docs.getxray.app/display/XRAY/Importing+Cucumber+Tests+-+REST
     * @see https://docs.getxray.app/display/XRAYCLOUD/Importing+Cucumber+Tests+-+REST+v2
     */
    importFeature(file: string, projectKey?: string, projectId?: string, source?: string): Promise<boolean>;
    /**
     * Uploads Cucumber test results to the Xray instance.
     *
     * @param cucumberJson - the test results as provided by the `cypress-cucumber-preprocessor`
     * @param cucumberInfo - the test execution information
     * @returns the key of the test execution issue, `null` if the upload was skipped or `undefined`
     * in case of errors
     * @see https://docs.getxray.app/display/XRAY/Import+Execution+Results+-+REST#ImportExecutionResultsREST-CucumberJSONresultsMultipart
     * @see https://docs.getxray.app/display/XRAYCLOUD/Import+Execution+Results+-+REST+v2
     */
    importExecutionCucumberMultipart(cucumberJson: CucumberMultipartFeature[], cucumberInfo: ICucumberMultipartInfo): Promise<string | null | undefined>;
}
/**
 * An abstract Xray client class for communicating with Xray instances.
 */
export declare abstract class XrayClient extends Client implements IXrayClient {
    /**
     * Construct a new client using the provided credentials.
     *
     * @param apiBaseUrl - the base URL for all HTTP requests
     * @param credentials - the credentials to use during authentication
     */
    constructor(apiBaseUrl: string, credentials: BasicAuthCredentials | PATCredentials | JWTCredentials);
    importExecution(execution: IXrayTestExecutionResults): Promise<string | null | undefined>;
    /**
     * Returns the endpoint to use for importing test execution results.
     *
     * @returns the URL
     */
    abstract getUrlImportExecution(): string;
    /**
     * Returns the test execution key from the import execution response.
     *
     * @param response - the import execution response
     * @returns the test execution issue key
     */
    abstract handleResponseImportExecution(response: ImportExecutionResponseServer | ImportExecutionResponseCloud): string;
    exportCucumber(keys?: string[], filter?: number): Promise<ExportCucumberTestsResponse>;
    /**
     * Returns the endpoint to use for exporting Cucumber feature files.
     *
     * @param keys - a list of issue keys
     * @param filter - an integer that represents the filter ID
     * @returns the URL
     */
    abstract getUrlExportCucumber(issueKeys?: string[], filter?: number): string;
    importFeature(file: string, projectKey?: string, projectId?: string, source?: string): Promise<boolean>;
    /**
     * Returns the endpoint to use for importing Cucumber feature files.
     *
     * @param projectKey - key of the project where the tests and pre-conditions are going to be created
     * @param projectId - id of the project where the tests and pre-conditions are going to be created
     * @param source - a name designating the source of the features being imported (e.g. the source project name)
     * @returns the URL
     */
    abstract getUrlImportFeature(projectKey?: string, projectId?: string, source?: string): string;
    /**
     * This method is called when a feature file was successfully imported to Xray.
     *
     * @param response - the import feature response
     */
    abstract handleResponseImportFeature(response: ImportFeatureResponseServer | ImportFeatureResponseCloud): void;
    importExecutionCucumberMultipart(cucumberJson: CucumberMultipartFeature[], cucumberInfo: ICucumberMultipartInfo): Promise<string | null | undefined>;
    /**
     * Prepares the Cucumber multipart import execution request.
     *
     * @param cucumberJson - the test results as provided by the `cypress-cucumber-preprocessor`
     * @param cucumberInfo - the test execution information
     * @returns the import execution request
     */
    abstract prepareRequestImportExecutionCucumberMultipart(cucumberJson: CucumberMultipartFeature[], cucumberInfo: ICucumberMultipartInfo): Promise<RequestConfigPost<FormData>>;
    /**
     * Returns the test execution key from the Cucumber multipart import execution response.
     *
     * @param response - the import execution response
     * @returns the test execution issue key
     */
    abstract handleResponseImportExecutionCucumberMultipart(response: ImportExecutionResponseServer | ImportExecutionResponseCloud): string;
}
