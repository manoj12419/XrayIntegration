"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.syncFeatureFile = exports.addXrayResultUpload = exports.configureXrayPlugin = void 0;
const context_1 = require("./context");
const hooks_1 = require("./hooks");
const requests_1 = require("./https/requests");
const logging_1 = require("./logging/logging");
const dedent_1 = require("./util/dedent");
const help_1 = require("./util/help");
async function configureXrayPlugin(config, options) {
    // Resolve these before all other options for correct enabledness.
    const pluginOptions = (0, context_1.initPluginOptions)(config.env, options.plugin);
    if (!pluginOptions.enabled) {
        (0, logging_1.logInfo)("Plugin disabled. Skipping further configuration");
        return;
    }
    // Init logging before all other configurations because they might require an initialized
    // logging module.
    (0, logging_1.initLogging)({
        debug: pluginOptions.debug,
        logDirectory: pluginOptions.logDirectory,
    });
    const internalOptions = {
        jira: (0, context_1.initJiraOptions)(config.env, options.jira),
        plugin: pluginOptions,
        xray: (0, context_1.initXrayOptions)(config.env, options.xray),
        cucumber: await (0, context_1.initCucumberOptions)(config, options.cucumber),
        openSSL: (0, context_1.initOpenSSLOptions)(config.env, options.openSSL),
    };
    requests_1.Requests.init({
        debug: internalOptions.plugin.debug,
        openSSL: internalOptions.openSSL,
    });
    (0, context_1.setPluginContext)({
        cypress: config,
        internal: internalOptions,
        clients: await (0, context_1.initClients)(internalOptions.jira, config.env),
    });
}
exports.configureXrayPlugin = configureXrayPlugin;
async function addXrayResultUpload(on) {
    on("before:run", async (runDetails) => {
        const context = (0, context_1.getPluginContext)();
        if (!context) {
            logInitializationError("before:run");
            return;
        }
        if (!context.internal.plugin.enabled) {
            (0, logging_1.logInfo)("Plugin disabled. Skipping before:run hook");
            return;
        }
        if (!runDetails.specs) {
            (0, logging_1.logWarning)("No specs about to be executed. Skipping before:run hook");
            return;
        }
        await (0, hooks_1.beforeRunHook)(runDetails.specs, context.internal, context.clients);
    });
    on("after:run", async (results) => {
        const context = (0, context_1.getPluginContext)();
        if (!context) {
            logInitializationError("after:run");
            return;
        }
        if (!context.internal.plugin.enabled) {
            (0, logging_1.logInfo)("Skipping after:run hook: Plugin disabled");
            return;
        }
        if (!context.internal.xray.uploadResults) {
            (0, logging_1.logInfo)("Skipping results upload: Plugin is configured to not upload test results");
            return;
        }
        if ("status" in results && results["status"] === "failed") {
            const failedResult = results;
            (0, logging_1.logError)((0, dedent_1.dedent)(`
                        Skipping after:run hook: Failed to run ${failedResult.failures} tests

                        ${failedResult.message}
                    `));
            return;
        }
        await (0, hooks_1.afterRunHook)(results, context.internal, context.clients);
    });
}
exports.addXrayResultUpload = addXrayResultUpload;
async function syncFeatureFile(file) {
    const context = (0, context_1.getPluginContext)();
    if (!context) {
        logInitializationError("file:preprocessor");
        return file.filePath;
    }
    if (!context.internal.plugin.enabled) {
        (0, logging_1.logInfo)(`Plugin disabled. Skipping feature file synchronization triggered by: ${file.filePath}`);
        return file.filePath;
    }
    return await (0, hooks_1.synchronizeFile)(file, context.cypress.projectRoot, context.internal, context.clients);
}
exports.syncFeatureFile = syncFeatureFile;
function logInitializationError(hook) {
    // Do not throw in case someone does not want the plugin to run but forgot to remove a hook.
    (0, logging_1.logError)((0, dedent_1.dedent)(`
            Skipping ${hook} hook: Plugin misconfigured: configureXrayPlugin() was not called

            Make sure your project is set up correctly: ${help_1.HELP.plugin.configuration.introduction}
        `));
}
