/// <reference types="cypress" />
import { CucumberPreprocessorArgs } from "./dependencies";
import { ClientCombination, InternalCucumberOptions, InternalJiraOptions, InternalOpenSSLOptions, InternalPluginOptions, InternalXrayOptions, Options, PluginContext } from "./types/plugin";
export declare function getPluginContext(): PluginContext | undefined;
export declare function setPluginContext(newContext: PluginContext): void;
export declare function clearPluginContext(): void;
/**
 * Returns an {@link InternalJiraOptions | `InternalJiraOptions`} instance based on parsed
 * environment variables and a provided options object. Environment variables will take precedence
 * over the options set in the object.
 *
 * @param env - an object containing environment variables as properties
 * @param options - an options object containing Jira options
 * @returns the constructed internal Jira options
 */
export declare function initJiraOptions(env: Cypress.ObjectLike, options: Options["jira"]): InternalJiraOptions;
/**
 * Returns an {@link InternalPluginOptions | `InternalPluginOptions`} instance based on parsed
 * environment variables and a provided options object. Environment variables will take precedence
 * over the options set in the object.
 *
 * @param env - an object containing environment variables as properties
 * @param options - an options object containing plugin options
 * @returns the constructed internal plugin options
 */
export declare function initPluginOptions(env: Cypress.ObjectLike, options: Options["plugin"]): InternalPluginOptions;
/**
 * Returns an {@link InternalXrayOptions | `InternalXrayOptions`} instance based on parsed environment
 * variables and a provided options object. Environment variables will take precedence over the
 * options set in the object.
 *
 * @param env - an object containing environment variables as properties
 * @param options - an options object containing Xray options
 * @returns the constructed internal Xray options
 */
export declare function initXrayOptions(env: Cypress.ObjectLike, options: Options["xray"]): InternalXrayOptions;
/**
 * Returns an {@link InternalCucumberOptions | `InternalCucumberOptions`} instance based on parsed
 * environment variables and a provided options object. Environment variables will take precedence
 * over the options set in the object.
 *
 * @param env - an object containing environment variables as properties
 * @param options - an options object containing Cucumber options
 * @returns the constructed internal Cucumber options
 */
export declare function initCucumberOptions(config: CucumberPreprocessorArgs[0], options: Options["cucumber"]): Promise<InternalCucumberOptions | undefined>;
/**
 * Returns an {@link InternalOpenSSLOptions | `InternalOpenSSLOptions`} instance based on parsed
 * environment variables and a provided options object. Environment variables will take precedence
 * over the options set in the object.
 *
 * @param env - an object containing environment variables as properties
 * @param options - an options object containing OpenSSL options
 * @returns the constructed internal OpenSSL options
 */
export declare function initOpenSSLOptions(env: Cypress.ObjectLike, options: Options["openSSL"]): InternalOpenSSLOptions;
export declare function initClients(jiraOptions: InternalJiraOptions, env: Cypress.ObjectLike): Promise<ClientCombination>;
