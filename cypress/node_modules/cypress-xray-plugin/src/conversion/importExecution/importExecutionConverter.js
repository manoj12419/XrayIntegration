"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportExecutionConverter = void 0;
const dedent_1 = require("../../util/dedent");
const time_1 = require("../../util/time");
const testConverter_1 = require("./testConverter");
/**
 * A class for converting Cypress run results into Xray JSON. Both Xray server JSON and Xray cloud
 * JSON are supported.
 */
class ImportExecutionConverter {
    isCloudConverter;
    /**
     * The configured plugin options.
     */
    options;
    /**
     * Construct a new converter with access to the provided options. The cloud converter flag is
     * used to deduce which sub-converters to create, if necessary (for example for converting test
     * results). When set to `true`, Xray cloud JSONs will be created, if set to `false`, the format
     * will be Xray server JSON.
     *
     * @param options - the options
     * @param isCloudConverter - whether Xray cloud JSONs should be created
     */
    constructor(options, isCloudConverter) {
        this.isCloudConverter = isCloudConverter;
        this.options = options;
    }
    async toXrayJson(results) {
        const testConverter = new testConverter_1.TestConverter(this.options, this.isCloudConverter);
        return {
            testExecutionKey: this.options.jira.testExecutionIssueKey,
            info: {
                project: this.options.jira.projectKey,
                startDate: (0, time_1.truncateISOTime)(results.startedTestsAt),
                finishDate: (0, time_1.truncateISOTime)(results.endedTestsAt),
                description: this.getDescription(results),
                summary: this.getTextExecutionResultSummary(results),
                testPlanKey: this.options.jira.testPlanIssueKey,
                testEnvironments: this.options.xray.testEnvironments,
            },
            tests: await testConverter.toXrayTests(results),
        };
    }
    getTextExecutionResultSummary(results) {
        // Don't replace existing execution summaries with the default one.
        if (this.options.jira.testExecutionIssueKey &&
            !this.options.jira.testExecutionIssueSummary) {
            return undefined;
        }
        return (this.options.jira.testExecutionIssueSummary ??
            `Execution Results [${new Date(results.startedTestsAt).getTime()}]`);
    }
    getDescription(results) {
        // Don't replace existing execution descriptions with the default one.
        if (this.options.jira.testExecutionIssueKey &&
            !this.options.jira.testExecutionIssueDescription) {
            return undefined;
        }
        return (this.options.jira.testExecutionIssueDescription ??
            (0, dedent_1.dedent)(`
                Cypress version: ${results.cypressVersion}
                Browser: ${results.browserName} (${results.browserVersion})
            `));
    }
}
exports.ImportExecutionConverter = ImportExecutionConverter;
