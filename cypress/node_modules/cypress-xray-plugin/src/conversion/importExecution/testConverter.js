"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestConverter = void 0;
const path_1 = __importStar(require("path"));
const semver_1 = require("semver");
const logging_1 = require("../../logging/logging");
const preprocessing_1 = require("../../preprocessing/preprocessing");
const base64_1 = require("../../util/base64");
const dedent_1 = require("../../util/dedent");
const errors_1 = require("../../util/errors");
const files_1 = require("../../util/files");
const time_1 = require("../../util/time");
const runConversion_1 = require("./runConversion");
const statusConversion_1 = require("./statusConversion");
/**
 * A class for converting Cypress run results into Xray test JSON.
 *
 * @see https://docs.getxray.app/display/XRAY/Import+Execution+Results#ImportExecutionResults-%22tests%22object-TestRundetails
 * @see https://docs.getxray.app/display/XRAYCLOUD/Using+Xray+JSON+format+to+import+execution+results#UsingXrayJSONformattoimportexecutionresults-%22test%22object-TestRundetails
 */
class TestConverter {
    options;
    isCloudConverter;
    /**
     * Construct a new converter with access to the provided options. The cloud converter flag is
     * used to deduce the output format. When set to `true`, Xray cloud JSONs will be created, if
     * set to `false`, the format will be Xray server JSON.
     *
     * @param options - the options
     * @param isCloudConverter - whether Xray cloud JSONs should be created
     */
    constructor(options, isCloudConverter) {
        this.options = options;
        this.isCloudConverter = isCloudConverter;
    }
    async toXrayTests(runResults) {
        const testRunData = await this.getTestRunData(runResults);
        const xrayTests = [];
        testRunData.forEach((testData) => {
            try {
                const issueKey = (0, preprocessing_1.getNativeTestIssueKey)(testData.title, this.options.jira.projectKey);
                const test = this.getTest(testData, issueKey, this.getXrayEvidence(testData));
                xrayTests.push(test);
            }
            catch (error) {
                (0, logging_1.logWarning)((0, dedent_1.dedent)(`
                        Skipping result upload for test: ${testData.title}

                        ${(0, errors_1.errorMessage)(error)}
                    `));
            }
        });
        if (xrayTests.length === 0) {
            throw new Error("Failed to convert Cypress tests into Xray tests: No Cypress tests to upload");
        }
        return [xrayTests[0], ...xrayTests.slice(1)];
    }
    async getTestRunData(runResults) {
        const testRunData = [];
        const conversionPromises = [];
        if ((0, semver_1.lt)(runResults.cypressVersion, "13.0.0")) {
            const runs = runResults.runs;
            if (runs.every((run) => {
                return (this.options.cucumber &&
                    run.spec.relative.endsWith(this.options.cucumber.featureFileExtension));
            })) {
                throw new Error("Failed to extract test run data: Only Cucumber tests were executed");
            }
            for (const run of runs) {
                (0, runConversion_1.getTestRunData_V12)(run).forEach((promise, index) => conversionPromises.push([run.tests[index].title.join(" "), promise]));
            }
        }
        else {
            const runs = runResults.runs;
            if (runs.every((run) => {
                return (this.options.cucumber &&
                    run.spec.relative.endsWith(this.options.cucumber.featureFileExtension));
            })) {
                throw new Error("Failed to extract test run data: Only Cucumber tests were executed");
            }
            for (const run of runs) {
                (0, runConversion_1.getTestRunData_V13)(run, this.options.jira.projectKey).forEach((promise, index) => conversionPromises.push([run.tests[index].title.join(" "), promise]));
            }
        }
        const convertedTests = await Promise.allSettled(conversionPromises.map((tuple) => tuple[1]));
        convertedTests.forEach((promise, index) => {
            if (promise.status === "fulfilled") {
                testRunData.push(promise.value);
            }
            else {
                (0, logging_1.logWarning)((0, dedent_1.dedent)(`
                        Skipping result upload for test: ${conversionPromises[index][0]}

                        ${(0, errors_1.errorMessage)(promise.reason)}
                    `));
            }
        });
        if (this.options.xray.uploadScreenshots) {
            if ((0, semver_1.gte)(runResults.cypressVersion, "13.0.0")) {
                for (const run of runResults.runs) {
                    for (const screenshot of run.screenshots) {
                        if (!this.willBeUploaded(screenshot, testRunData)) {
                            const path = path_1.default.parse(screenshot.path);
                            (0, logging_1.logWarning)((0, dedent_1.dedent)(`
                                    Screenshot will not be uploaded: ${screenshot.path}

                                    Its filename does not contain a test issue key.
                                    To upload screenshots, include a test issue key anywhere in their names:

                                    cy.screenshot("${this.options.jira.projectKey}-123 ${path.name}")
                                `));
                        }
                    }
                }
            }
        }
        return testRunData;
    }
    getTest(test, issueKey, evidence) {
        // TODO: Support multiple iterations.
        const xrayTest = {
            testKey: issueKey,
            start: (0, time_1.truncateISOTime)(test.startedAt.toISOString()),
            finish: (0, time_1.truncateISOTime)(new Date(test.startedAt.getTime() + test.duration).toISOString()),
            status: (0, statusConversion_1.getXrayStatus)(test.status, this.isCloudConverter, this.options.xray.status),
        };
        if (evidence.length > 0) {
            xrayTest.evidence = evidence;
        }
        return xrayTest;
    }
    getXrayEvidence(testRunData) {
        const evidence = [];
        if (this.options.xray.uploadScreenshots) {
            for (const screenshot of testRunData.screenshots) {
                let filename = (0, path_1.basename)(screenshot.filepath);
                if (this.options.plugin.normalizeScreenshotNames) {
                    filename = (0, files_1.normalizedFilename)(filename);
                }
                evidence.push({
                    filename: filename,
                    data: (0, base64_1.encodeFile)(screenshot.filepath),
                });
            }
        }
        return evidence;
    }
    willBeUploaded(screenshot, testRunData) {
        return testRunData.some((testRunData) => {
            return testRunData.screenshots.some(({ filepath }) => {
                return screenshot.path === filepath;
            });
        });
    }
}
exports.TestConverter = TestConverter;
