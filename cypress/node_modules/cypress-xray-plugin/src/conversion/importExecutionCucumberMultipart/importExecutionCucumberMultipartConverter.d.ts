import { IJiraRepository } from "../../repository/jira/jiraRepository";
import { InternalJiraOptions, InternalXrayOptions } from "../../types/plugin";
import { CucumberMultipartFeature, ICucumberMultipart } from "../../types/xray/requests/importExecutionCucumberMultipart";
import { IRunData } from "./multipartInfoBuilder";
/**
 * An interface containing all options which can be passed to the Cucumber multipart converter.
 */
export interface ImportExecutionCucumberMultipartConverterOptions {
    jira: Pick<InternalJiraOptions, "projectKey" | "testExecutionIssueDescription" | "testExecutionIssueDetails" | "testExecutionIssueKey" | "testExecutionIssueSummary" | "testPlanIssueKey">;
    xray: Pick<InternalXrayOptions, "testEnvironments" | "uploadScreenshots">;
}
/**
 * A class for converting Cucumber JSON results into Xray Cucumber multipart JSON.
 *
 * @see https://docs.getxray.app/display/XRAY/Import+Execution+Results+-+REST#ImportExecutionResultsREST-CucumberJSONresultsMultipart
 * @see https://docs.getxray.app/display/XRAYCLOUD/Import+Execution+Results+-+REST+v2#ImportExecutionResultsRESTv2-CucumberJSONresultsMultipart
 */
export declare class ImportExecutionCucumberMultipartConverter {
    private readonly options;
    private readonly isCloudConverter;
    private readonly jiraRepository;
    /**
     * Construct a new converter with access to the provided options. The cloud converter flag is
     * used to deduce the output format. When set to `true`, Xray cloud JSONs will be created, if
     * set to `false`, the format will be Xray server JSON.
     *
     * @param options - the options
     * @param isCloudConverter - whether Xray cloud JSONs should be created
     * @param jiraRepository - the Jira repository for fetching issue data
     */
    constructor(options: ImportExecutionCucumberMultipartConverterOptions, isCloudConverter: boolean, jiraRepository: IJiraRepository);
    /**
     * Converts Cucumber JSON results into Xray Cucumber multipart JSON. Additional Cypress run data
     * is required during conversion for some information like Cypress version or the browser used.
     *
     * @param input - the Cucumber JSON results
     * @param runData - the Cypress run data
     * @returns corresponding Xray Cucumber multipart JSON
     */
    convert(input: CucumberMultipartFeature[], runData: IRunData): Promise<ICucumberMultipart>;
}
