"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMultipartInfoCloud = exports.buildMultipartInfoServer = void 0;
const dedent_1 = require("../../util/dedent");
/**
 * Converts Cypress run data into Cucumber multipart information, which could be used when creating
 * new test executions on import or when updating existing ones.
 *
 * @param runData - Cypress run data
 * @param testExecutionIssueData - additional information to consider
 * @returns the Cucumber multipart information data for Xray server
 */
function buildMultipartInfoServer(runData, testExecutionIssueData) {
    const multipartInfo = {
        fields: {
            project: {
                key: testExecutionIssueData.projectKey,
            },
            summary: testExecutionIssueData.summary ??
                defaultSummary(new Date(runData.startedTestsAt).getTime()),
            description: testExecutionIssueData.description ??
                defaultDescription(runData.cypressVersion, runData.browserName, runData.browserVersion),
            issuetype: testExecutionIssueData.issuetype,
        },
    };
    if (testExecutionIssueData.testPlan) {
        multipartInfo.fields[testExecutionIssueData.testPlan.fieldId] =
            testExecutionIssueData.testPlan.issueKey;
    }
    if (testExecutionIssueData.testEnvironments) {
        multipartInfo.fields[testExecutionIssueData.testEnvironments.fieldId] =
            testExecutionIssueData.testEnvironments.environments;
    }
    return multipartInfo;
}
exports.buildMultipartInfoServer = buildMultipartInfoServer;
/**
 * Converts Cypress run data into Cucumber multipart information, which could be used when creating
 * new test executions on import or when updating existing ones.
 *
 * @param runData - Cypress run data
 * @param testExecutionIssueData - additional information to consider
 * @returns the Cucumber multipart information data for Xray cloud
 */
function buildMultipartInfoCloud(runData, testExecutionIssueData) {
    return {
        fields: {
            project: {
                key: testExecutionIssueData.projectKey,
            },
            summary: testExecutionIssueData.summary ??
                defaultSummary(new Date(runData.startedTestsAt).getTime()),
            description: testExecutionIssueData.description ??
                defaultDescription(runData.cypressVersion, runData.browserName, runData.browserVersion),
            issuetype: testExecutionIssueData.issuetype,
        },
        xrayFields: {
            testPlanKey: testExecutionIssueData.testPlan?.issueKey,
            environments: testExecutionIssueData.testEnvironments?.environments,
        },
    };
}
exports.buildMultipartInfoCloud = buildMultipartInfoCloud;
function defaultSummary(timestamp) {
    return `Execution Results [${timestamp}]`;
}
function defaultDescription(cypressVersion, browserName, browserVersion) {
    return (0, dedent_1.dedent)(`
        Cypress version: ${cypressVersion}
        Browser: ${browserName} (${browserVersion})
    `);
}
