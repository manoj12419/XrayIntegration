"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportExecutionCucumberMultipartConverter = void 0;
const jiraIssueFetcher_1 = require("../../repository/jira/fields/jiraIssueFetcher");
const multipartFeatureBuilder_1 = require("./multipartFeatureBuilder");
const multipartInfoBuilder_1 = require("./multipartInfoBuilder");
/**
 * A class for converting Cucumber JSON results into Xray Cucumber multipart JSON.
 *
 * @see https://docs.getxray.app/display/XRAY/Import+Execution+Results+-+REST#ImportExecutionResultsREST-CucumberJSONresultsMultipart
 * @see https://docs.getxray.app/display/XRAYCLOUD/Import+Execution+Results+-+REST+v2#ImportExecutionResultsRESTv2-CucumberJSONresultsMultipart
 */
class ImportExecutionCucumberMultipartConverter {
    options;
    isCloudConverter;
    jiraRepository;
    /**
     * Construct a new converter with access to the provided options. The cloud converter flag is
     * used to deduce the output format. When set to `true`, Xray cloud JSONs will be created, if
     * set to `false`, the format will be Xray server JSON.
     *
     * @param options - the options
     * @param isCloudConverter - whether Xray cloud JSONs should be created
     * @param jiraRepository - the Jira repository for fetching issue data
     */
    constructor(options, isCloudConverter, jiraRepository) {
        this.options = options;
        this.isCloudConverter = isCloudConverter;
        this.jiraRepository = jiraRepository;
    }
    /**
     * Converts Cucumber JSON results into Xray Cucumber multipart JSON. Additional Cypress run data
     * is required during conversion for some information like Cypress version or the browser used.
     *
     * @param input - the Cucumber JSON results
     * @param runData - the Cypress run data
     * @returns corresponding Xray Cucumber multipart JSON
     */
    async convert(input, runData) {
        const features = (0, multipartFeatureBuilder_1.buildMultipartFeatures)(input, {
            testExecutionIssueKey: this.options.jira.testExecutionIssueKey,
            includeScreenshots: this.options.xray.uploadScreenshots,
            projectKey: this.options.jira.projectKey,
            useCloudTags: this.isCloudConverter,
        });
        if (this.isCloudConverter) {
            const testExecutionIssueData = {
                projectKey: this.options.jira.projectKey,
                summary: this.options.jira.testExecutionIssueSummary,
                description: this.options.jira.testExecutionIssueDescription,
                issuetype: this.options.jira.testExecutionIssueDetails,
            };
            if (this.options.jira.testPlanIssueKey) {
                testExecutionIssueData.testPlan = {
                    issueKey: this.options.jira.testPlanIssueKey,
                };
            }
            if (this.options.xray.testEnvironments) {
                testExecutionIssueData.testEnvironments = {
                    environments: this.options.xray.testEnvironments,
                };
            }
            return {
                features: features,
                info: (0, multipartInfoBuilder_1.buildMultipartInfoCloud)(runData, testExecutionIssueData),
            };
        }
        const testExecutionIssueData = {
            projectKey: this.options.jira.projectKey,
            summary: this.options.jira.testExecutionIssueSummary,
            description: this.options.jira.testExecutionIssueDescription,
            issuetype: this.options.jira.testExecutionIssueDetails,
        };
        if (this.options.jira.testPlanIssueKey) {
            testExecutionIssueData.testPlan = {
                issueKey: this.options.jira.testPlanIssueKey,
                fieldId: await this.jiraRepository.getFieldId(jiraIssueFetcher_1.SupportedFields.TEST_PLAN),
            };
        }
        if (this.options.xray.testEnvironments) {
            testExecutionIssueData.testEnvironments = {
                environments: this.options.xray.testEnvironments,
                fieldId: await this.jiraRepository.getFieldId(jiraIssueFetcher_1.SupportedFields.TEST_ENVIRONMENTS),
            };
        }
        return {
            features: features,
            info: (0, multipartInfoBuilder_1.buildMultipartInfoServer)(runData, testExecutionIssueData),
        };
    }
}
exports.ImportExecutionCucumberMultipartConverter = ImportExecutionCucumberMultipartConverter;
