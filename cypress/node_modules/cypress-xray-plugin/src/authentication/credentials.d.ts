import { StringMap } from "../types/util";
/**
 * A basic HTTP header.
 * @example
 * ```ts
 *   { "Authorization": "Bearer xyz" }
 *   { "Content-Type": "application/json" }
 * ```
 */
export type HttpHeader = StringMap<string>;
/**
 * The interface which all credential classes must implement. All credentials must be usable in an
 * HTTP authorization request header.
 */
export interface IHttpCredentials {
    /**
     * Returns the HTTP authorization header value of the credentials.
     *
     * @returns the HTTP header value
     */
    getAuthorizationHeader(): Promise<HttpHeader>;
}
/**
 * A basic authorization credentials class, storing base64 encoded credentials of usernames and
 * passwords.
 */
export declare class BasicAuthCredentials implements IHttpCredentials {
    private readonly encodedCredentials;
    /**
     * Constructs new basic authorization credentials.
     *
     * @param username - the username
     * @param password - the password
     */
    constructor(username: string, password: string);
    getAuthorizationHeader(): Promise<HttpHeader>;
}
/**
 * A personal access token (_PAT_) credentials class, storing a secret token to use during HTTP
 * authorization.
 */
export declare class PATCredentials implements IHttpCredentials {
    private readonly token;
    /**
     * Constructs new PAT credentials from the provided token.
     *
     * @param token - the token
     */
    constructor(token: string);
    getAuthorizationHeader(): Promise<HttpHeader>;
}
/**
 * A JWT credentials class, storing a JWT token to use during HTTP authorization. The class is
 * designed to retrieve fresh JWT tokens from an authentication URL/endpoint. Once retrieved, the
 * token will be stored and reused whenever necessary.
 */
export declare class JWTCredentials implements IHttpCredentials {
    private readonly clientId;
    private readonly clientSecret;
    private readonly authenticationUrl;
    private token?;
    /**
     * Constructs new JWT credentials. The client ID and client secret will be used to retrieve a
     * JWT token from the authentication URL on demand.
     *
     * @param clientId - the client ID
     * @param clientSecret - the client secret
     * @param authenticationUrl - the authentication URL/token endpoint
     */
    constructor(clientId: string, clientSecret: string, authenticationUrl: string);
    /**
     * Return the URL to authenticate to.
     *
     * @returns the URL
     */
    getAuthenticationUrl(): string;
    private getToken;
    getAuthorizationHeader(): Promise<HttpHeader>;
}
